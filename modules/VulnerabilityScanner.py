
import argparse
import concurrent.futures
import os
import importlib
import inspect
import importlib.util
class VulnerabilityScanner:
    def __init__(self, targets=None, target_files=None,files=None, files_pocs=None,threads=1):
        self.targets      = targets
        self.target_files = target_files
        self.files_pocs   = files_pocs
        self.files        = files 
        self.threads      = threads
        self.vulnerabilities = []
        self.select_target()
        self.select_poc(files_pocs)
    
    def select_target(self):
        if self.targets or self.target_files:
            if self.targets:
                pass
            elif self.target_files:
                with open(self.target_files, 'r') as f:
                    self.targets = f.read().splitlines()
            else:
                print("【?】 目标url冲突，请选择单个输入或读入文件")
        else:
            print("【?】 目标url为空，请输入单个url或导入文件")
    def select_poc(self,pocs_folder):
        files_list      = []
        self.files_pocs = pocs_folder
        if self.files or self.files_pocs:
            if self.files:
                for file_path in self.files:
                    if file_path.endswith('.py'):
                        try:
                            files_list.append(file_path)
                            module_name = file_path[:-3]
                            spec = importlib.util.spec_from_file_location(module_name, file_path)
                            module = importlib.util.module_from_spec(spec)
                            spec.loader.exec_module(module)
                            self.vulnerabilities.append(module)
                        except ImportError:
                            print(f'【?】 Failed to import vulnerability detection file: {file_path}')
                    else:
                        print(f'【?】 poc文件必须是 .py 结尾')
            elif self.files_pocs:
                
                for root, dirs, files in os.walk(self.files_pocs):
                    for file in files:
                        if file.endswith('.py'):
                            files_list.append(file)
                            module_name = file[:-3]  # 去除文件后缀名（.py）
                            module_path = os.path.join(root, module_name).replace(os.sep, '.')  # 将路径转换为模块路径
                            try:
                                module = importlib.import_module(module_path)
                                self.vulnerabilities.append(module)
                            except ImportError:
                                print(f'【?】Failed to import vulnerability detection file: {file}')
            else:
                print("【?】 poc冲突，poc文件/pocs目录只能选择一个")
            print("【+】 读取到 pocs 文件:",files_list)
        else:
            print("【?】 poc为空，请输入单个poc或选择poc文件夹")
        return files_list
    def run_detection(self,gui=None):
        if self.vulnerabilities != []:
            if self.targets:
                for target in self.targets:
                    with concurrent.futures.ThreadPoolExecutor(max_workers=self.threads) as executor:
                        futures = []
                        for vulnerability in self.vulnerabilities:
                            
                            if hasattr(vulnerability, 'detect_vulnerability'):
                                futures.append(executor.submit(vulnerability.detect_vulnerability, target))
                            else:
                                if gui:
                                    gui.update_log_text(f"【?】 {vulnerability} 模块中没有 detect_vulnerability（）函数")
                                print("【?】 ", vulnerability , " 模块中没有 detect_vulnerability（）函数")

                        for future in concurrent.futures.as_completed(futures):
                            result = future.result()
                            # 处理检测结果，例如输出或保存到文件
                            if result:
                                if gui:
                                    gui.update_log_text(f'【+】 {target} :  Vulnerable to {result["vulnerability"]};\n  POC is {target}{result["poc"]}')
                                print('\033[91m' + f'【+】 {target} :  Vulnerable to {result["vulnerability"]};\n  POC is {target}{result["poc"]}' + '\033[0m')
                                # 保存结果到文件
                                file_name = f'result.txt'
                                try:
                                    with open(file_name, 'x') as file:
                                        file.write(f'【+】 {target} :  Vulnerable to {result["vulnerability"]};\n  POC is {target}{result["poc"]}')
                                except FileExistsError:
                                    if gui:
                                        gui.update_log_text(f'【?】 Error: File {file_name} already exists.')
                                    print(f'Error: File {file_name} already exists.')
                                    # 进行其他处理，如记录到日志文件等
                            else:
                                if gui:
                                    gui.update_log_text(f'【-】 Not Vulnerable: {target}')
                                print(f'【-】 Not Vulnerable: {target}')
            else:
                if gui:
                    gui.update_log_text('【?】 url为空')
                print('【?】 url为空')
        else:
            if gui:
                gui.update_log_text('【?】 poc为空')
            print('【?】 poc为空')



