
import wx
import threading
import subprocess
from modules import VulnerabilityScanner as vulscanner

class VulnerabilityScannerGUI(wx.Frame):
    def __init__(self, parent, title):
        super(VulnerabilityScannerGUI, self).__init__(parent, title=title, size=(400, 500))
        self.vul   = None
        self.url   = None
        self.vuls  = None
        self.urls  = None
        self.target = None
        self.panel = wx.Panel(self)
        self.target_label = wx.StaticText(self.panel, label="单独urls/ips（example：https://domain.com/?s=1）")
        self.target_textctrl = wx.TextCtrl(self.panel)
        self.batch_scan_checkbox = wx.CheckBox(self.panel, label="使用urls文件批量扫描")
        self.poc_label = wx.StaticText(self.panel, label="单选POC文件：")
        # self.poc_choice = wx.Choice(self.panel)
        self.select_all_checkbox = wx.CheckBox(self.panel, label="使用pocs文件批量扫描")
        self.threads_label = wx.StaticText(self.panel, label="扫描线程：")
        self.file_input = wx.FilePickerCtrl(self.panel)
        #self.log_text = wx.TextCtrl(self.panel, pos=(10, 110), size=(380, 150), style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.log_text = wx.TextCtrl(self.panel, size=(380, 150),style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.threads_spin = wx.SpinCtrl(self.panel, value="1", min=1, max=100)
        
        self.scan_button = wx.Button(self.panel, label="开始扫描")
        self.scan_button.Bind(wx.EVT_BUTTON, self.on_scan_button_click)
        self.reset_button = wx.Button(self.panel, label="复位")
        self.reset_button.Bind(wx.EVT_BUTTON, self.on_reset_button_click)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.target_label, 0, wx.ALL, 5)
        self.sizer.Add(self.target_textctrl, 0, wx.EXPAND | wx.ALL, 5)
        self.sizer.Add(self.batch_scan_checkbox, 0, wx.ALL, 5)
        self.sizer.Add(self.poc_label, 0, wx.ALL, 5)
        self.sizer.Add(self.file_input, 0, wx.EXPAND | wx.ALL, 5)
        # self.sizer.Add(self.poc_choice, 0, wx.EXPAND | wx.ALL, 5)
        self.sizer.Add(self.select_all_checkbox, 0, wx.ALL, 5)
        self.sizer.Add(self.threads_label, 0, wx.ALL, 5)
        self.sizer.Add(self.threads_spin, 0, wx.EXPAND | wx.ALL, 5)
        self.sizer.Add(self.scan_button, 0, wx.CENTER | wx.ALL, 5)
        self.sizer.Add(self.reset_button, 0, wx.CENTER | wx.ALL, 5)
        self.sizer.Add(self.log_text, 0, wx.EXPAND | wx.ALL, 5)
        self.panel.SetSizer(self.sizer)
        self.Show()
    # 复位按钮
    def on_reset_button_click(self, event):
        self.url=None
        self.urls=None
        self.vul=None
        self.vuls=None
        self.threads_spin.SetValue(1)

    def on_scan_button_click(self, event):
        self.target = self.target_textctrl.GetValue().split(",")
        self.target = [y.strip() for y in self.target]
        threads = self.threads_spin.GetValue()
        is_checked = self.select_all_checkbox.GetValue() # poc复选框为真
        if is_checked:
            # 如果复选框poc批量选择为真，将目录名保存，后面引用漏洞扫描函数时传参
            self.vuls = 'pocs'
        else:
            z = self.file_input.GetPath().split(",")
            z = [k.strip() for k in z]
            # 如果输入了poc文件路径
            if z:
                # 将值传给漏洞检测函数
                self.vul = z
            else:
                self.log_text.AppendText(f"【?】 请选择单个poc文件或者pocs目录\n")
                print("【?】 请选择单个poc文件或者pocs目录")
        if self.target!=['']:
            self.url = self.target
        else:
            if self.batch_scan_checkbox.GetValue():
                # 如果选择了复选框urls批量检测，储存其值，以便后用
                self.urls = 'urls.txt'
            else:
                self.log_text.AppendText(f"【?】 目标url为空，请输入单个url或导入文件\n")
                print("【?】 目标url为空，请输入单个url或导入文件")
        # 在此处执行漏洞检测的逻辑
        # 创建一个线程来运行漏洞检测函数，并将输出重定向到GUI界面
        self.log_text.Clear()  # 清空文本框内容

        scanner_thread = threading.Thread(target=self.run_vulnerability_scanner, args=(threads,))
        scanner_thread.start()

    def run_vulnerability_scanner(self, threads):
        scanner = vulscanner.VulnerabilityScanner(targets=self.url, target_files=self.urls, files=self.vul, files_pocs=self.vuls, threads=threads)
        scanner.run_detection(self)
        self.update_log_text(f"扫描完成")
    def update_log_text(self, text):
        wx.CallAfter(self.log_text.AppendText, text + '\n')  # 通过wx.CallAfter方法确保在GUI线程中更新文本框内容





