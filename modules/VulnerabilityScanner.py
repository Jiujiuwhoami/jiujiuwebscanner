
import argparse
import concurrent.futures
import os
import importlib

class VulnerabilityScanner:
    def __init__(self, targets, files=None, threads=1):
        self.targets = targets
        self.files = files or []
        self.threads = threads
        self.vulnerabilities = []
        self.load_vulnerabilities()

    def load_vulnerabilities(self):
        for file in self.files:
            try:
                module = __import__(file[:-3])
                self.vulnerabilities.append(module)
            except ImportError:
                print(f'【?】Failed to import vulnerability detection file: {file}')

    def load_vulnerabilities_from_folder(self, folder):
        files = os.listdir(folder)
        print("【+】 读取到 pocs 文件:",files)

        for root, dirs, files in os.walk(folder):
            for file in files:
                if file.endswith('.py'):
                    module_name = file[:-3]  # 去除文件后缀名（.py）
                    module_path = os.path.join(root, module_name).replace(os.sep, '.')  # 将路径转换为模块路径
                    try:
                        module = importlib.import_module(module_path)
                        self.vulnerabilities.append(module)
                    except ImportError:
                        print(f'【?】Failed to import vulnerability detection file: {file}')

    def run_detection(self):
        for target in self.targets:
            with concurrent.futures.ThreadPoolExecutor(max_workers=self.threads) as executor:
                futures = []
                for vulnerability in self.vulnerabilities:
                    futures.append(executor.submit(vulnerability.detect_vulnerability, target))

                for future in concurrent.futures.as_completed(futures):
                    result = future.result()
                    # 处理检测结果，例如输出或保存到文件
                    if result:
                        print(f'【+】 {target} :  Vulnerable to {result["vulnerability"]};\n  POC is {target}{result["poc"]}')
                        # 保存结果到文件
                        file_name = f'result.txt'
                        try:
                            with open(file_name, 'x') as file:
                                file.write(f'【+】 {target} :  Vulnerable to {result["vulnerability"]};\n  POC is {target}{result["poc"]}')
                        except FileExistsError:
                            print(f'Error: File {file_name} already exists.')
                            # 进行其他处理，如记录到日志文件等
                    else:
                        print(f'【-】 Not Vulnerable: {target}')


